cmake_minimum_required(VERSION 3.20)

if(NOT CMAKE_VERSION VERSION_LESS 3.0)
    cmake_policy(SET CMP0048 NEW)
endif()

STRING(REGEX REPLACE "/$" "" CURRENT_ABSOLUTE_PATH ${CMAKE_CURRENT_SOURCE_DIR})
STRING(REGEX REPLACE ".*/(.*)" "\\1" CURRENT_FOLDER_NAME ${CURRENT_ABSOLUTE_PATH})

project(${CURRENT_FOLDER_NAME} LANGUAGES CXX C)

INCLUDE(GNUInstallDirs)
INCLUDE(CMakePackageConfigHelpers)

INCLUDE(TestBigEndian)
TEST_BIG_ENDIAN(IS_BIG_ENDIAN)
if(IS_BIG_ENDIAN)
    ADD_DEFINITIONS(-DBIG_ENDIAN)
    MESSAGE(STATUS "System data endian: BIG")
else()
    MESSAGE(STATUS "System data endian: LITTLE")
endif()

# Set C++14
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED ON)
SET(CMAKE_CXX_EXTENSIONS OFF)
SET(CMAKE_CXX_VISIBILITY_PRESET hidden)
SET(CMAKE_C_VISIBILITY_PRESET hidden)

IF (CMAKE_SYSTEM_NAME MATCHES "Windows") 
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
ELSE () 
    SET(CMAKE_POSITION_INDEPENDENT_CODE ON)

    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -Wl,--no-undefined -Wl,-rpath,.")
    IF(CMAKE_BUILD_TYPE AND (CMAKE_BUILD_TYPE STREQUAL "Debug"))
        SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS} -O0 -g2 -ggdb")
        ADD_DEFINITIONS(-D_DEBUG)
    ELSEIF(CMAKE_BUILD_TYPE AND (CMAKE_BUILD_TYPE STREQUAL "Release"))
        SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS} -O3")
    ENDIF()

    ADD_DEFINITIONS(-Wall)
    ADD_DEFINITIONS(-Wno-deprecated)
    ADD_DEFINITIONS(-Wno-deprecated-declarations)
    ADD_DEFINITIONS(-Wno-write-strings)
    ADD_DEFINITIONS(-Wno-unknown-pragmas)
    ADD_DEFINITIONS(-Wno-reorder)
    ADD_DEFINITIONS(-Wno-sign-compare)
ENDIF (CMAKE_SYSTEM_NAME MATCHES "Windows") 

SET(CMAKE_DEBUG_POSTFIX "d")
SET(CMAKE_INSTALL_PREFIX ${CMAKE_SOURCE_DIR}/install)

MESSAGE("======== Configuring ${PROJECT_NAME} ======== ")
MESSAGE(STATUS "${CMAKE_SYSTEM}")
MESSAGE(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")
MESSAGE(STATUS "CMAKE_CXX_STANDARD: ${CMAKE_CXX_STANDARD}")
MESSAGE(STATUS "CMAKE_DEBUG_POSTFIX: ${CMAKE_DEBUG_POSTFIX}")

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/src)

# Find requirements
if(NOT libuv_FOUND)
    find_package(libuv REQUIRED)
endif()

ADD_SUBDIRECTORY(test_servers)
ADD_SUBDIRECTORY(test_clients)

